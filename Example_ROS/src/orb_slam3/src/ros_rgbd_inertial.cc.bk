#include <iostream>
#include <algorithm>
#include <fstream>
#include <chrono>
#include <vector>
#include <queue>
#include <thread>
#include <mutex>

#include <ros/ros.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/Imu.h>

#include <opencv2/core/core.hpp>

#include "../include/System.h"
#include "../include/ImuTypes.h"

//-----------------------01
//import the required data types
#include<tf/transform_broadcaster.h>
//#include "../../../include/Converter.h"
#include "../include/Converter.h"
#include <nav_msgs/Path.h>
#include "geometry_msgs/PoseStamped.h"
//eigen related
#include <Eigen/Dense>
#include <opencv2/core/eigen.hpp>
//------------------------


using namespace std;

class ImuGrabber
{
public:
    ImuGrabber(){};
    void GrabImu(const sensor_msgs::ImuConstPtr &imu_msg);

    queue<sensor_msgs::ImuConstPtr> imuBuf;
    std::mutex mBufMutex;
};

class ImageGrabber
{
public:
    ImageGrabber(ORB_SLAM3::System *pSLAM, ImuGrabber *pImuGb, const bool bClahe) : mpSLAM(pSLAM), mpImuGb(pImuGb), mbClahe(bClahe) {}

    void GrabImageRgb(const sensor_msgs::ImageConstPtr &msg);
    void GrabImageDepth(const sensor_msgs::ImageConstPtr &msg);
    cv::Mat GetImage(const sensor_msgs::ImageConstPtr &img_msg);
    cv::Mat GetImage1(const sensor_msgs::ImageConstPtr &img_msg);
    void SyncWithImu();

    queue<sensor_msgs::ImageConstPtr> rgbBuf, depthBuf;
    std::mutex mBufMutexRgb, mBufMutexDepth;

    ORB_SLAM3::System *mpSLAM;
    ImuGrabber *mpImuGb;

    //Improves image contrast
    const bool mbClahe;
    cv::Ptr<cv::CLAHE> mClahe = cv::createCLAHE(3.0, cv::Size(8, 8));
};

//-----------------02
//define  declare and publisher
ros::Publisher pose_pub;
ros::Publisher RGBD_imu_path_pub;
nav_msgs::Path RGBD_imu_path;
//------------------



int main(int argc, char **argv)
{
    ros::init(argc, argv, "Rgbd_Inertial");
    ros::NodeHandle n("~");
    ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Info);
    bool bEqual = false;
    bool flag;
    if (argc < 3 || argc > 4)
    {
        cerr << endl
             << "Usage: rosrun ORB_SLAM3 Rgbd_Inertial path_to_vocabulary path_to_settings [do_equalize]" << endl;
        ros::shutdown();
        return 1;
    }

    if (argc == 4)
    {
        std::string sbEqual(argv[3]);
        if (sbEqual == "true")
            bEqual = true;
    }

    // Create SLAM system. It initializes all system threads and gets ready to process frames.
    ORB_SLAM3::System SLAM(argv[1], argv[2], ORB_SLAM3::System::IMU_RGBD, true);

    ImuGrabber imugb;
    ImageGrabber igb(&SLAM, &imugb, bEqual);

    // Maximum delay, 5 seconds
    // ros::Subscriber sub_imu = n.subscribe("/d400/imu", 1000, &ImuGrabber::GrabImu, &imugb);
    // ros::Subscriber sub_img_rgb = n.subscribe("/d400/color/image_raw", 100, &ImageGrabber::GrabImageRgb, &igb);
    // ros::Subscriber sub_img_depth = n.subscribe("/d400/aligned_depth_to_color/image_raw", 100, &ImageGrabber::GrabImageDepth, &igb);
    ros::Subscriber sub_imu = n.subscribe("/airsim_node/drone_1/imu/imu", 1000, &ImuGrabber::GrabImu, &imugb);
    ros::Subscriber sub_img_rgb = n.subscribe("/airsim_node/drone_1/front_center/Scene", 100, &ImageGrabber::GrabImageRgb, &igb);
    ros::Subscriber sub_img_depth = n.subscribe("/airsim_node/drone_1/front_center/DepthPlanar", 100, &ImageGrabber::GrabImageDepth, &igb);

    std::thread sync_thread(&ImageGrabber::SyncWithImu, &igb);
    //------------------------03
    pose_pub = n.advertise<geometry_msgs::PoseStamped>("ORB_SLAM3/RGBD_IMU/pose", 5);//
    RGBD_imu_path_pub = n.advertise<nav_msgs::Path>("ORB_SLAM3/RGBD_IMU/path",10);//
    //------------------------
    
    ros::spin();
    ///////////////////////
    // Stop all threads
    
    SLAM.Shutdown();

    // Save camera trajectory
    SLAM.SaveKeyFrameTrajectoryTUM("KeyFrameTrajectory_TUM_Format.txt");
    SLAM.SaveTrajectoryTUM("FrameTrajectory_TUM_Format.txt");
    SLAM.SaveTrajectoryKITTI("FrameTrajectory_KITTI_Format.txt");
    
    ///////////////////////
    return 0;
}

void ImageGrabber::GrabImageRgb(const sensor_msgs::ImageConstPtr &img_msg)
{
    mBufMutexRgb.lock();
    if (!rgbBuf.empty())
        rgbBuf.pop();
    rgbBuf.push(img_msg);
    mBufMutexRgb.unlock();
}

void ImageGrabber::GrabImageDepth(const sensor_msgs::ImageConstPtr &img_msg)
{
    mBufMutexDepth.lock();
    if (!depthBuf.empty())
        depthBuf.pop();
    depthBuf.push(img_msg);
    mBufMutexDepth.unlock();
}

cv::Mat ImageGrabber::GetImage(const sensor_msgs::ImageConstPtr &img_msg)
{
    // Copy the ros image message to cv::Mat.
    cv_bridge::CvImageConstPtr cv_ptr;
    //cv::Mat shrink;
    try
    {
        cv_ptr = cv_bridge::toCvShare(img_msg);
    }
    catch (cv_bridge::Exception &e)
    {
        ROS_ERROR("cv_bridge exception: %s", e.what());
    }
    //cv::resize(cv_ptr->image.clone(),shrink,cv::Size(320,240));
    return cv_ptr->image.clone();

    // if (cv_ptr->image.type() == 0)
    // {
    //     return cv_ptr->image.clone();
    // }
    // else
    // {
    //     std::cout << "Error type" << std::endl;
    //     return cv_ptr->image.clone();
    // }
}

cv::Mat ImageGrabber::GetImage1(const sensor_msgs::ImageConstPtr &img_msg)
{
    // Copy the ros image message to cv::Mat.
    cv_bridge::CvImageConstPtr cv_ptr;
    cv::Mat expand;
    try
    {
        cv_ptr = cv_bridge::toCvShare(img_msg);
    }
    catch (cv_bridge::Exception &e)
    {
        ROS_ERROR("cv_bridge exception: %s", e.what());
    }
    cv::resize(cv_ptr->image.clone(),expand,cv::Size(640,480),2,2,CV_INTER_LINEAR);
    return expand;

    // if (cv_ptr->image.type() == 0)
    // {
    //     return cv_ptr->image.clone();
    // }
    // else
    // {
    //     std::cout << "Error type" << std::endl;
    //     return cv_ptr->image.clone();
    // }
}

void ImageGrabber::SyncWithImu()
{
    const double maxTimeDiff = 0.01;
    while (1)
    {
        cv::Mat imRgb, imDepth;
        double tImRgb = 0, tImDepth = 0;
        if (!rgbBuf.empty() && !depthBuf.empty() && !mpImuGb->imuBuf.empty())
        {
            tImRgb = rgbBuf.front()->header.stamp.toSec();
            tImDepth = depthBuf.front()->header.stamp.toSec();

            this->mBufMutexDepth.lock();
            while ((tImRgb - tImDepth) > maxTimeDiff && depthBuf.size() > 1)
            {
                depthBuf.pop();
                tImDepth = depthBuf.front()->header.stamp.toSec();
            }
            this->mBufMutexDepth.unlock();

            this->mBufMutexRgb.lock();
            while ((tImDepth - tImRgb) > maxTimeDiff && rgbBuf.size() > 1)
            {
                rgbBuf.pop();
                tImRgb = rgbBuf.front()->header.stamp.toSec();
            }
            this->mBufMutexRgb.unlock();

            if ((tImRgb - tImDepth) > maxTimeDiff || (tImDepth - tImRgb) > maxTimeDiff)
            {
                // std::cout << "big time difference" << std::endl;
                continue;
            }
            if (tImRgb > mpImuGb->imuBuf.back()->header.stamp.toSec())
                continue;

            this->mBufMutexRgb.lock();
            imRgb = GetImage(rgbBuf.front());
            double tmp_t = rgbBuf.front()->header.stamp.toSec();
            rgbBuf.pop();
            this->mBufMutexRgb.unlock();

            this->mBufMutexDepth.lock();
            imDepth = GetImage1(depthBuf.front());
            depthBuf.pop();
            this->mBufMutexDepth.unlock();

            vector<ORB_SLAM3::IMU::Point> vImuMeas;
            mpImuGb->mBufMutex.lock();
            if (!mpImuGb->imuBuf.empty())
            {
                // Load imu measurements from buffer
                vImuMeas.clear();
                while (!mpImuGb->imuBuf.empty() && mpImuGb->imuBuf.front()->header.stamp.toSec() <= tImRgb)
                {
                    double t = mpImuGb->imuBuf.front()->header.stamp.toSec();
                    cv::Point3f acc(mpImuGb->imuBuf.front()->linear_acceleration.x, mpImuGb->imuBuf.front()->linear_acceleration.y, mpImuGb->imuBuf.front()->linear_acceleration.z);
                    cv::Point3f gyr(mpImuGb->imuBuf.front()->angular_velocity.x, mpImuGb->imuBuf.front()->angular_velocity.y, mpImuGb->imuBuf.front()->angular_velocity.z);
                    vImuMeas.push_back(ORB_SLAM3::IMU::Point(acc, gyr, t));
                    mpImuGb->imuBuf.pop();
                }
            }
            mpImuGb->mBufMutex.unlock();
            if (mbClahe)
            {
                mClahe->apply(imRgb, imRgb);
                mClahe->apply(imDepth, imDepth);
            }

            //----------------04
            //pose indormation is returned by the following functions
            cv::Mat Tcw;
            Sophus::SE3f Tcw_SE3f = mpSLAM->TrackRGBD(imRgb, imDepth, tImRgb, vImuMeas);
            Eigen::Matrix4f Tcw_Matrix = Tcw_SE3f.matrix();
             Eigen::Matrix4f T4;
             T4=T4.Identity();
            cv::eigen2cv(Tcw_Matrix, Tcw);

            geometry_msgs::PoseStamped pose;

            cv::Mat Rwc = Tcw.rowRange(0,3).colRange(0,3).t(); // Rotation information
            cv::Mat twc = -Rwc*Tcw.rowRange(0,3).col(3); // translation information
            vector<float> q = ORB_SLAM3::Converter::toQuaternion(Rwc);

            //if(twc.at<float>(0, 2)>0.0)
            //{
            //{
              pose.header.stamp = ros::Time(tmp_t);////////////////////////////////////////TODO: change the time to vImuMeas's t
              pose.header.frame_id ="path";
        
              tf::Transform new_transform;
              new_transform.setOrigin(tf::Vector3(twc.at<float>(0, 0), twc.at<float>(0, 1), twc.at<float>(0, 2)));
              tf::Quaternion quaternion(q[0], q[1], q[2], q[3]);
              new_transform.setRotation(quaternion);
              tf::poseTFToMsg(new_transform, pose.pose);
              pose_pub.publish(pose);
 
              RGBD_imu_path.header.frame_id="path";
              RGBD_imu_path.header.stamp=ros::Time::now();
              RGBD_imu_path.poses.push_back(pose);
              RGBD_imu_path_pub.publish(RGBD_imu_path);
            //}
            //}
            //--------------------
            std::chrono::milliseconds tSleep(1);
            std::this_thread::sleep_for(tSleep);
            
        }
    }
}

void ImuGrabber::GrabImu(const sensor_msgs::ImuConstPtr &imu_msg)
{
    mBufMutex.lock();
    imuBuf.push(imu_msg);
    mBufMutex.unlock();
    return;
}